// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package tutorial

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUsersByEmail = `-- name: CountUsersByEmail :one
SELECT count(*) FROM users
WHERE email = $1
`

func (q *Queries) CountUsersByEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, countUsersByEmail, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEmailVerifyToken = `-- name: CreateEmailVerifyToken :one
INSERT INTO email_verify_token (
  user_id,token,expires_at
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, token, expires_at, created_at
`

type CreateEmailVerifyTokenParams struct {
	UserID    int32
	Token     string
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateEmailVerifyToken(ctx context.Context, arg CreateEmailVerifyTokenParams) (EmailVerifyToken, error) {
	row := q.db.QueryRow(ctx, createEmailVerifyToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i EmailVerifyToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name,email,password
) VALUES (
  $1, $2, $3
)
RETURNING id, name, email, password, is_active
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsActive,
	)
	return i, err
}

const deleteEmailVerifyToken = `-- name: DeleteEmailVerifyToken :exec
DELETE FROM email_verify_token
WHERE  token = $1
`

func (q *Queries) DeleteEmailVerifyToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteEmailVerifyToken, token)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getEmailVerifyToken = `-- name: GetEmailVerifyToken :one
SELECT id, user_id, token, expires_at, created_at FROM email_verify_token
WHERE token = $1
AND user_id = $2
`

type GetEmailVerifyTokenParams struct {
	Token  string
	UserID int32
}

func (q *Queries) GetEmailVerifyToken(ctx context.Context, arg GetEmailVerifyTokenParams) (EmailVerifyToken, error) {
	row := q.db.QueryRow(ctx, getEmailVerifyToken, arg.Token, arg.UserID)
	var i EmailVerifyToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, password, is_active FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsActive,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, is_active FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsActive,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, password, is_active FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set is_active = $2
WHERE id = $1
RETURNING id, name, email, password, is_active
`

type UpdateUserParams struct {
	ID       int32
	IsActive pgtype.Bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.IsActive)
	return err
}
